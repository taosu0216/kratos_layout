// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.1
// source: tour.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTourAi = "/tour.v1.Tour/Ai"
const OperationTourSayHello = "/tour.v1.Tour/SayHello"

type TourHTTPServer interface {
	Ai(context.Context, *AiRequest) (*AiReply, error)
	SayHello(context.Context, *HiRequest) (*HiReply, error)
}

func RegisterTourHTTPServer(s *http.Server, srv TourHTTPServer) {
	r := s.Route("/")
	r.GET("/tour/test", _Tour_SayHello0_HTTP_Handler(srv))
	r.GET("/tour/ai", _Tour_Ai0_HTTP_Handler(srv))
}

func _Tour_SayHello0_HTTP_Handler(srv TourHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HiRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTourSayHello)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SayHello(ctx, req.(*HiRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HiReply)
		return ctx.Result(200, reply)
	}
}

func _Tour_Ai0_HTTP_Handler(srv TourHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AiRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTourAi)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Ai(ctx, req.(*AiRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AiReply)
		return ctx.Result(200, reply)
	}
}

type TourHTTPClient interface {
	Ai(ctx context.Context, req *AiRequest, opts ...http.CallOption) (rsp *AiReply, err error)
	SayHello(ctx context.Context, req *HiRequest, opts ...http.CallOption) (rsp *HiReply, err error)
}

type TourHTTPClientImpl struct {
	cc *http.Client
}

func NewTourHTTPClient(client *http.Client) TourHTTPClient {
	return &TourHTTPClientImpl{client}
}

func (c *TourHTTPClientImpl) Ai(ctx context.Context, in *AiRequest, opts ...http.CallOption) (*AiReply, error) {
	var out AiReply
	pattern := "/tour/ai"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTourAi))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TourHTTPClientImpl) SayHello(ctx context.Context, in *HiRequest, opts ...http.CallOption) (*HiReply, error) {
	var out HiReply
	pattern := "/tour/test"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTourSayHello))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: tour.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Tour_SayHello_FullMethodName = "/tour.v1.Tour/SayHello"
	Tour_Ai_FullMethodName       = "/tour.v1.Tour/Ai"
)

// TourClient is the client API for Tour service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TourClient interface {
	SayHello(ctx context.Context, in *HiRequest, opts ...grpc.CallOption) (*HiReply, error)
	Ai(ctx context.Context, in *AiRequest, opts ...grpc.CallOption) (*AiReply, error)
}

type tourClient struct {
	cc grpc.ClientConnInterface
}

func NewTourClient(cc grpc.ClientConnInterface) TourClient {
	return &tourClient{cc}
}

func (c *tourClient) SayHello(ctx context.Context, in *HiRequest, opts ...grpc.CallOption) (*HiReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HiReply)
	err := c.cc.Invoke(ctx, Tour_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourClient) Ai(ctx context.Context, in *AiRequest, opts ...grpc.CallOption) (*AiReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AiReply)
	err := c.cc.Invoke(ctx, Tour_Ai_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TourServer is the server API for Tour service.
// All implementations must embed UnimplementedTourServer
// for forward compatibility
type TourServer interface {
	SayHello(context.Context, *HiRequest) (*HiReply, error)
	Ai(context.Context, *AiRequest) (*AiReply, error)
	mustEmbedUnimplementedTourServer()
}

// UnimplementedTourServer must be embedded to have forward compatible implementations.
type UnimplementedTourServer struct {
}

func (UnimplementedTourServer) SayHello(context.Context, *HiRequest) (*HiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedTourServer) Ai(context.Context, *AiRequest) (*AiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ai not implemented")
}
func (UnimplementedTourServer) mustEmbedUnimplementedTourServer() {}

// UnsafeTourServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TourServer will
// result in compilation errors.
type UnsafeTourServer interface {
	mustEmbedUnimplementedTourServer()
}

func RegisterTourServer(s grpc.ServiceRegistrar, srv TourServer) {
	s.RegisterService(&Tour_ServiceDesc, srv)
}

func _Tour_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tour_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServer).SayHello(ctx, req.(*HiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tour_Ai_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServer).Ai(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tour_Ai_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServer).Ai(ctx, req.(*AiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tour_ServiceDesc is the grpc.ServiceDesc for Tour service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tour_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tour.v1.Tour",
	HandlerType: (*TourServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Tour_SayHello_Handler,
		},
		{
			MethodName: "Ai",
			Handler:    _Tour_Ai_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tour.proto",
}
